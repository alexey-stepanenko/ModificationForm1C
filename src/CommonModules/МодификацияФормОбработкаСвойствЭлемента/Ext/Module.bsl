#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьСвойствоЭлемента(ОписаниеЭлемента, ИмяСвойства, ЗначениеСвойства) Экспорт 
	ОбработчикиСвойствЭлементов = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ОбработчикиСвойствЭлементов();
	
	ТипЭлемента = ОписаниеЭлемента.ТипЭлемента;
	Обработчики = ОбработчикиСвойствЭлементов.Получить(ТипЭлемента);
	Если Обработчики = Неопределено Тогда
		ТекстИсключения = СтрШаблон(
		  НСтр("ru='Отсутствуют обработчики свойств для типа элемента ""%1""'"),
		  Строка(ТипЭлемента)
		);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ИдентификаторСвойства = ВРег(ИмяСвойства);
	
	Если Не Обработчики.Свойство(ИдентификаторСвойства) Тогда
		ТекстИсключения = СтрШаблон(
		  НСтр("ru='Отсутствует обработчик свойства ""%1"" для типа элемента ""%2""'"),
		  ИмяСвойства,
		  Строка(ТипЭлемента)
		);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		КомандаВыполненияОбработчика = СтрШаблон("%1(ОписаниеЭлемента, ЗначениеСвойства)", Обработчики[ИдентификаторСвойства]);
		Выполнить КомандаВыполненияОбработчика;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры // ОбработатьСвойствоЭлемента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыФункции

Процедура ОбработатьТекстовоеСвойство(ОписаниеЭлемента, ИмяСвойства, ЗначениеСвойства)
	ОписаниеЭлемента.СвойстваЭлемента.Вставить(ИмяСвойства, ЗначениеСвойства);
КонецПроцедуры // ОбработатьТекстовоеСвойство()

Процедура ОбработатьЛогическоеСвойство(ОписаниеЭлемента, ИмяСвойства, ЗначениеСвойства)
	ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить("Булево");
	ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);

	ОписаниеЭлемента.СвойстваЭлемента.Вставить(ИмяСвойства, ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьТекстовоеСвойство()

Функция ПреобразованноеЗначениеСвойства(Коллекция, ЗначениеСвойства)
	Идентификатор = ВРег(ЗначениеСвойства);
	
	Возврат Коллекция.Получить(Идентификатор);
КонецФункции // ПреобразованноеЗначениеСвойства()

Функция ЗначениеСвойстваЭлемента(ОписаниеЭлемента, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	РезультатФункции = ЗначениеПоУмолчанию;
	
	Если ОписаниеЭлемента.СвойстваЭлемента.Свойство(ИмяСвойства) Тогда
		РезультатФункции = ОписаниеЭлемента.СвойстваЭлемента[ИмяСвойства];
	КонецЕсли;
	
	Возврат РезультатФункции;
КонецФункции // ЗначениеСвойстваЭлемента()

#КонецОбласти

#Область ПолеФормы

Процедура ОбработатьСвойствоПоляФормыПутьКДанным(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьТекстовоеСвойство(ОписаниеЭлемента, "ПутьКДанным", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоПоляФормыПутьКДанным()

Процедура ОбработатьСвойствоПоляФормыВид(ОписаниеЭлемента, ЗначениеСвойства)
	ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ВидПоляФормы"));
	
	ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
	ОписаниеЭлемента.СвойстваЭлемента.Вставить("Вид", ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьСвойствоПоляФормыПутьКДанным()

Процедура ОбработатьСвойствоПоляФормыПоложениеЗаголовка(ОписаниеЭлемента, ЗначениеСвойства)
	ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ПоложениеЗаголовкаЭлементаФормы"));
	
	ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
	ОписаниеЭлемента.СвойстваЭлемента.Вставить("ПоложениеЗаголовка", ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьСвойствоПоляФормыПоложениеЗаголовка()

Процедура ОбработатьСвойствоПоляФормыЗаголовок(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьТекстовоеСвойство(ОписаниеЭлемента, "Заголовок", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоПоляФормыЗаголовок()

Процедура ОбработатьСвойствоПоляФормыРежимВыбораИзСписка(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьЛогическоеСвойство(ОписаниеЭлемента, "РежимВыбораИзСписка", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоПоляФормыРежимВыбораИзСписка()

Процедура ОбработатьСвойствоПоляФормыМногострочныйРежим(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьЛогическоеСвойство(ОписаниеЭлемента, "МногострочныйРежим", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоПоляФормыМногострочныйРежим()

Процедура ОбработатьСвойствоПоляФормыАвтоМаксимальнаяШирина(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьЛогическоеСвойство(ОписаниеЭлемента, "АвтоМаксимальнаяШирина", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоПоляФормыАвтоМаксимальнаяШирина()

Процедура ОбработатьСвойствоПоляФормыПодсказкаВвода(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьТекстовоеСвойство(ОписаниеЭлемента, "ПодсказкаВвода", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоПоляФормыПодсказкаВвода()

Процедура ОбработатьСвойствоПоляФормыПодсказка(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьТекстовоеСвойство(ОписаниеЭлемента, "Подсказка", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоПоляФормыПодсказка()

Процедура ОбработатьСвойствоПоляФормыОтображениеПодсказки(ОписаниеЭлемента, ЗначениеСвойства)
	ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеПодсказки"));
	
	ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
	ОписаниеЭлемента.СвойстваЭлемента.Вставить("ОтображениеПодсказки", ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьСвойствоПоляФормыОтображениеПодсказки()

#КонецОбласти

#Область ГруппаФормы

Процедура ОбработатьСвойствоГруппыФормыВид(ОписаниеЭлемента, ЗначениеСвойства)
	ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ВидГруппыФормы"));
	
	ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
	ОписаниеЭлемента.СвойстваЭлемента.Вставить("Вид", ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьСвойствоГруппыФормыВид()

Процедура ОбработатьСвойствоГруппыФормыОтображение(ОписаниеЭлемента, ЗначениеСвойства)
	ВидЭлемента = ЗначениеСвойстваЭлемента(ОписаниеЭлемента, "Вид", Неопределено);
	Если ВидЭлемента = Неопределено Тогда
		ВидЭлемента = ВидГруппыФормы.ОбычнаяГруппа;
		ОписаниеЭлемента.СвойстваЭлемента.Вставить("Вид", ВидЭлемента);
	КонецЕсли;
	
	Если ВидЭлемента = ВидГруппыФормы.ГруппаКнопок Тогда
		//ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	ИначеЕсли ВидЭлемента = ВидГруппыФормы.ГруппаКолонок Тогда
		//ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	ИначеЕсли ВидЭлемента = ВидГруппыФормы.КоманднаяПанель Тогда
		//ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	ИначеЕсли ВидЭлемента = ВидГруппыФормы.КонтекстноеМеню Тогда
		//ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	ИначеЕсли ВидЭлемента = ВидГруппыФормы.ОбычнаяГруппа Тогда
		ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	ИначеЕсли ВидЭлемента = ВидГруппыФормы.Подменю Тогда
		//ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	ИначеЕсли ВидЭлемента = ВидГруппыФормы.Страница Тогда
		//ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	ИначеЕсли ВидЭлемента = ВидГруппыФормы.Страницы Тогда
		//ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ОтображениеОбычнойГруппы"));
	Иначе
		// TODO: Вызвать исключение изза неизвестного вида элемента
	КонецЕсли;
	
	ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
	ОписаниеЭлемента.СвойстваЭлемента.Вставить("Отображение", ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьСвойствоГруппыФормыОтображение()

Процедура ОбработатьСвойствоГруппыФормыОтображатьЗаголовок(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьЛогическоеСвойство(ОписаниеЭлемента, "ОтображатьЗаголовок", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоГруппыФормыОтображатьЗаголовок()

Процедура ОбработатьСвойствоГруппыФормыГруппировка(ОписаниеЭлемента, ЗначениеСвойства)
	ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ГруппировкаПодчиненныхЭлементовФормы"));
	
	ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
	ОписаниеЭлемента.СвойстваЭлемента.Вставить("Группировка", ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьСвойствоГруппыФормыГруппировка()

Процедура ОбработатьСвойствоГруппыФормыРастягиватьПоГоризонтали(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьЛогическоеСвойство(ОписаниеЭлемента, "РастягиватьПоГоризонтали", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоГруппыФормыОтображатьЗаголовок()

Процедура ОбработатьСвойствоГруппыФормыЗаголовок(ОписаниеЭлемента, ЗначениеСвойства)
	ОбработатьТекстовоеСвойство(ОписаниеЭлемента, "Заголовок", ЗначениеСвойства);
КонецПроцедуры // ОбработатьСвойствоГруппыФормыОтображатьЗаголовок()

Процедура ОбработатьСвойствоГруппыФормыСквозноеВыравнивание(ОписаниеЭлемента, ЗначениеСвойства)
	ВидЭлемента = ЗначениеСвойстваЭлемента(ОписаниеЭлемента, "Вид", Неопределено);
	Если ВидЭлемента = Неопределено Тогда
		ВидЭлемента = ВидГруппыФормы.ОбычнаяГруппа;
		ОписаниеЭлемента.СвойстваЭлемента.Вставить("Вид", ВидЭлемента);
	КонецЕсли;
	
	Если ВидЭлемента = ВидГруппыФормы.ОбычнаяГруппа Тогда
		ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("СквозноеВыравнивание"));
		ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
		ОписаниеЭлемента.СвойстваЭлемента.Вставить("СквозноеВыравнивание", ПреобразованноеЗначение);
	КонецЕсли;
КонецПроцедуры // ОбработатьСвойствоГруппыФормыСквозноеВыравнивание()

Процедура ОбработатьСвойствоГруппыФормыПоведение(ОписаниеЭлемента, ЗначениеСвойства)
	ВидЭлемента = ЗначениеСвойстваЭлемента(ОписаниеЭлемента, "Вид", Неопределено);
	Если ВидЭлемента = Неопределено Тогда
		ВидЭлемента = ВидГруппыФормы.ОбычнаяГруппа;
		ОписаниеЭлемента.СвойстваЭлемента.Вставить("Вид", ВидЭлемента);
	КонецЕсли;
	
	Если ВидЭлемента = ВидГруппыФормы.ОбычнаяГруппа Тогда
		ЗначенияСвойств = МодификацияФормОбработкаСвойствЭлементаПовтИсп.ЗначенияСтандартныхПеречислений().Получить(Тип("ПоведениеОбычнойГруппы"));
		ПреобразованноеЗначение = ПреобразованноеЗначениеСвойства(ЗначенияСвойств, ЗначениеСвойства);
		ОписаниеЭлемента.СвойстваЭлемента.Вставить("Поведение", ПреобразованноеЗначение);
	КонецЕсли;
КонецПроцедуры // ОбработатьСвойствоГруппыФормыПоведение()

Процедура ОбработатьСвойствоГруппыФормыЦветФона(ОписаниеЭлемента, Знач ЗначениеСвойства)
	КомпонентыЦвета = СтрРазделить(ЗначениеСвойства, ",");
	Вариант = КомпонентыЦвета[0];
	Если Вариант = "$" Тогда
		Красный = 0;
		Зеленый = 0;
		Синий = 0;
		ТипКомпонентаЦвета = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0));
		Если КомпонентыЦвета.Количество() > 1 Тогда
			Красный = ТипКомпонентаЦвета.ПривестиЗначение(КомпонентыЦвета[1]);
		КонецЕсли;
		Если КомпонентыЦвета.Количество() > 2 Тогда
			Зеленый = ТипКомпонентаЦвета.ПривестиЗначение(КомпонентыЦвета[2]);
		КонецЕсли;
		Если КомпонентыЦвета.Количество() > 3 Тогда
			Синий = ТипКомпонентаЦвета.ПривестиЗначение(КомпонентыЦвета[3]);
		КонецЕсли;
		ПреобразованноеЗначение = Новый Цвет(Красный, Зеленый, Синий);
	Иначе
		Возврат;
	КонецЕсли;

	ОписаниеЭлемента.СвойстваЭлемента.Вставить("ЦветФона", ПреобразованноеЗначение);
КонецПроцедуры // ОбработатьСвойствоГруппыФормыЦветФона()

#КонецОбласти

#КонецОбласти

