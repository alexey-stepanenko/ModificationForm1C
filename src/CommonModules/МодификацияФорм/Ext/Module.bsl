#Область ПрограммныйИнтерфейс

// TODO: Добавить описание процедуры
Процедура МодифицироватьФорму(Форма, Отказ, МакетОписанияМодификаций, ГенераторПротокола = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ГенераторПротокола = Неопределено Тогда
		ГенераторПротокола = Обработки.ГенераторПротоколаМодификацииФормПоУмолчанию.СоздатьГенераторПротокола();
	КонецЕсли;
	
	ОписаниеМодификаций = ОписаниеМодификаций(МакетОписанияМодификаций, ГенераторПротокола);
	ПроверитьОписаниеМодификаций(ОписаниеМодификаций, ГенераторПротокола);
	МодифицироватьРеквизиты(Форма, ОписаниеМодификаций, ГенераторПротокола);
	МодифицироватьЭлементы(Форма, ОписаниеМодификаций, ГенераторПротокола);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // МодифицироватьФорму()

// TODO: Добавить описание процедуры
Функция МакетОписанияМодификаций(МакетОписанияМодификацийМетаданные) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	ПолноеИмя = МакетОписанияМодификацийМетаданные.ПолноеИмя(); 
	ИмяМакета = МакетОписанияМодификацийМетаданные.Имя;
	КоллекцияОбъектов = МодификацияФормПовтИсп.КоллекцияОбъектовПоПолномуИмени(ПолноеИмя);
	Если КоллекцияОбъектов = Метаданные.ОбщиеМакеты Тогда
		МакетОписанияМодификаций = ПолучитьОбщийМакет(МакетОписанияМодификацийМетаданные.Имя);
	Иначе
		ИмяРодителя = МакетОписанияМодификацийМетаданные.Родитель().Имя;
		МакетОписанияМодификаций = КоллекцияОбъектов[ИмяРодителя].ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МакетОписанияМодификаций;
КонецФункции // МакетОписанияМодификаций()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеМодификаций(МакетОписаниеМодификаций, ГенераторПротокола) Экспорт 
	РезультатФункции = СоздатьСтруктуруОписанияМодификаций();
	
	Для Сч = 1 По МакетОписаниеМодификаций.КоличествоСтрок() Цикл
		СтрокаДокумента = МакетОписаниеМодификаций.ПолучитьСтроку(Сч);
		ОписаниеПолей = ОписаниеПолей(СтрокаДокумента, Сч);
		Попытка
			ОбработатьПоля(РезультатФункции, ОписаниеПолей, ГенераторПротокола);
		Исключение
			ИнформацияОбОшибке =  ИнформацияОбОшибке();
			ОписаниеОшибки = СоздатьСтруктуруОписанияОшибки();
			ЗаполнитьОписаниеОшибкиИзИнформацииОбОшибке(ОписаниеОшибки, ИнформацияОбОшибке);
			ОписаниеОшибки.НомерСтрокиМакета = Сч;
			ОписаниеОшибки.СтрокаМакета = СтрокаДокумента;
			ГенераторПротокола.ОбработатьОшибку(ОписаниеОшибки);
			Если ГенераторПротокола.ПрерватьМодификациюПриОшибке() Тогда
				ВызватьИсключение;
			КонецЕсли;	
		КонецПопытки;
	КонецЦикла;
	
	СформироватьЗначенияСвойствЭлементов(РезультатФункции.Элементы);
	
	Возврат РезультатФункции;
КонецФункции // ОписаниеМодификаций()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписаниеМодификаций

Функция СоздатьСтруктуруОписанияМодификаций()
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Реквизиты", Новый Структура);
	РезультатФункции.Вставить("Элементы", Новый Структура);
	
	Возврат РезультатФункции;
КонецФункции // СоздатьСтруктуруОписанияМодификаций()

Функция ОписаниеПолей(СтрокаДокумента, НомерСтроки)
	РазделительПолей = МодификацияФормПереопределяемый.РазделительПолей();
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("НомерСтроки", НомерСтроки);
	
	Поля = Новый Массив;
	ЭлементыСтроки = СтрРазделить(СтрокаДокумента, РазделительПолей, Ложь);
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Поля.Добавить(СокрЛП(Элемент));
	КонецЦикла;
	РезультатФункции.Вставить("Поля", Поля);
	
	Возврат РезультатФункции;
КонецФункции // ОписаниеПолей()

Функция СоздатьСтруктуруОписанияОшибки()
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("ДополнительнаяИнформация", Неопределено);
	РезультатФункции.Вставить("ИмяМодуля", Неопределено);
	РезультатФункции.Вставить("ИсходнаяСтрока", Неопределено);
	РезультатФункции.Вставить("Код", Неопределено);
	РезультатФункции.Вставить("НомерСтроки", Неопределено);
	РезультатФункции.Вставить("Описание", Неопределено);
	РезультатФункции.Вставить("НомерСтрокиМакета", Неопределено);
	РезультатФункции.Вставить("СтрокаМакета", Неопределено);
	
	Возврат РезультатФункции;
КонецФункции // СоздатьСтруктуруИнформацииОбОшибке()

Процедура ЗаполнитьОписаниеОшибкиИзИнформацииОбОшибке(ОписаниеОшибки, ИнформацияОбОшибке)
	ЗаполнитьЗначенияСвойств(ОписаниеОшибки, ИнформацияОбОшибке);
	//ОписаниеОшибки.Вставить("ДополнительнаяИнформация", ИнформацияОбОшибке.ДополнительнаяИнформация);
	//ОписаниеОшибки.Вставить("ИмяМодуля", ИнформацияОбОшибке.ИмяМодуля);
	//ОписаниеОшибки.Вставить("ИсходнаяСтрока", ИнформацияОбОшибке.ИсходнаяСтрока);
	//ОписаниеОшибки.Вставить("Код", ИнформацияОбОшибке.Код);
	//ОписаниеОшибки.Вставить("НомерСтроки", ИнформацияОбОшибке.НомерСтроки);
	//ОписаниеОшибки.Вставить("Описание", ИнформацияОбОшибке.Описание);
КонецПроцедуры // ЗаполнитьОписаниеОшибкиИзИнформацииОбОшибке()

Процедура ОбработатьПоля(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола)
	Если ОписаниеПолей.Поля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ВРег(ОписаниеПолей.Поля[0]);
	Если МодификацияФормИдентификаторы.ЭтоСтрокаРеквизита(Идентификатор) Тогда
		ОбработатьСтрокуРеквизита(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола);
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоСтрокаТипаРеквизита(Идентификатор) Тогда
		ОбработатьСтрокуТипаРеквизита(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола);
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоСтрокаЭлемента(Идентификатор) Тогда
		ОбработатьСтрокуЭлемента(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола);
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоСтрокаСвойстваЭлемента(Идентификатор) Тогда
		ОбработатьСтрокуСвойстваЭлемента(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола);
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоСтрокаОбработчикаЭлемента(Идентификатор) Тогда
		ОбработатьСтрокуОбработчикаЭлемента(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры // ОбработатьПоля()

#Область ЗначенияСвойствЭлементов

Процедура СформироватьЗначенияСвойствЭлементов(ОписанияЭлементов)
	Для Каждого ОписаниеЭлемента Из ОписанияЭлементов Цикл
		ЗначенияСвойствЭлемента = ЗначенияСвойствЭлемента(ОписаниеЭлемента);
	//	ЗначенияСвойствЭлемента = Неопределено;
	//	Если ОписаниеЭлемента.ТипЭлемента = МодификацияФормПовтИсп.ТипГруппаФормы() Тогда
	//		ЗначенияСвойствЭлемента = ЗначенияСвойствГруппыФормы(ОписаниеЭлемента.ПредставленияСвойствЭлемента);
	//	ИначеЕсли ОписаниеЭлемента.ТипЭлемента = МодификацияФормПовтИсп.ТипДекорацияФормы() Тогда
	//		ЗначенияСвойствЭлемента = ЗначенияСвойствДекорацииФормы(ОписаниеЭлемента.ПредставленияСвойствЭлемента);
	//	ИначеЕсли ОписаниеЭлемента.ТипЭлемента = МодификацияФормПовтИсп.ТипКнопкаФормы() Тогда
	//		ЗначенияСвойствЭлемента = ЗначенияСвойствКнопкиФормы(ОписаниеЭлемента.ПредставленияСвойствЭлемента);
	//	ИначеЕсли ОписаниеЭлемента.ТипЭлемента = МодификацияФормПовтИсп.ТипПолеФормы() Тогда
	//		ЗначенияСвойствЭлемента = ЗначенияСвойствПоляФормы(ОписаниеЭлемента.ПредставленияСвойствЭлемента);
	//	ИначеЕсли ОписаниеЭлемента.ТипЭлемента = МодификацияФормПовтИсп.ТипТаблицаФормы() Тогда
	//		ЗначенияСвойствЭлемента = ЗначенияСвойствТаблицыФормы(ОписаниеЭлемента.ПредставленияСвойствЭлемента);
	//	Иначе
	//		Продолжить;
	//	КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СформироватьЗначенияСвойствЭлементов()

Функция ЗначенияСвойствЭлемента(ОписаниеЭлемента)
	РезультатФункции = Неопределено;
	
	Возврат РезультатФункции;
КонецФункции // ЗначенияСвойствЭлемента()

Функция ЗначенияСвойствГруппыФормы(ПредставленияСвойствЭлемента)
	РезультатФункции = Неопределено;
	
	Возврат РезультатФункции;
КонецФункции // ЗначенияСвойствГруппыФормы()

Функция ЗначенияСвойствДекорацииФормы(ПредставленияСвойствЭлемента)
	РезультатФункции = Неопределено;
	
	Возврат РезультатФункции;
КонецФункции // ЗначенияСвойствДекорацииФормы()

Функция ЗначенияСвойствКнопкиФормы(ПредставленияСвойствЭлемента)
	РезультатФункции = Неопределено;
	
	Возврат РезультатФункции;
КонецФункции // ЗначенияСвойствКнопкиФормы()

Функция ЗначенияСвойствПоляФормы(ПредставленияСвойствЭлемента)
	РезультатФункции = Неопределено;
	
	Возврат РезультатФункции;
КонецФункции // ЗначенияСвойствПоляФормы()

Функция ЗначенияСвойствТаблицыФормы(ПредставленияСвойствЭлемента)
	РезультатФункции = Неопределено;
	
	Возврат РезультатФункции;
КонецФункции // ЗначенияСвойствТаблицыФормы()

#КонецОбласти

#Область ОбработкаПолей

#Область СтрокаРеквизита
	
Процедура ОбработатьСтрокуРеквизита(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола)
	МинимальноеКоличествоПолей = 2;
	КоличествоПолей = ОписаниеПолей.Поля.Количество();
	ПроверитьКоличествоПолейСтроки(ОписаниеПолей, МинимальноеКоличествоПолей);

	ИмяРеквизита = ОписаниеПолей.Поля[1];
	ИдентификаторРеквизита = ВРег(ИмяРеквизита);
	ОписаниеРеквизита = Новый Структура;
	Если ОписаниеМодификаций.Реквизиты.Свойство(ИдентификаторРеквизита) Тогда
		ОписаниеРеквизита = ОписаниеМодификаций.Реквизиты[ИдентификаторРеквизита];
	КонецЕсли;
	ОписаниеРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	ОписаниеРеквизита.Вставить("ТипыРеквизита", Новый Соответствие);
	
	ОписаниеМодификаций.Реквизиты.Вставить(ИдентификаторРеквизита, ОписаниеРеквизита);
КонецПроцедуры // ОбработатьСтрокуРеквизита()

#КонецОбласти

#Область СтрокаТипаРеквизита

Процедура ОбработатьСтрокуТипаРеквизита(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола)
	МинимальноеКоличествоПолей = 3;
	КоличествоПолей = ОписаниеПолей.Поля.Количество();
	ПроверитьКоличествоПолейСтроки(ОписаниеПолей, МинимальноеКоличествоПолей);
	
	ИмяРеквизита = ОписаниеПолей.Поля[1];
	ИмяТипа = ОписаниеПолей.Поля[2];
	ИдентификаторРеквизита = ВРег(ИмяРеквизита);
	ИдентификаторТипа = ВРег(ИмяТипа);
	Если Не ОписаниеМодификаций.Реквизиты.Свойство(ИдентификаторРеквизита) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Отсутствует описание реквизита ""%1""'"), ИмяРеквизита);
	КонецЕсли;
	
	ДополнительныеПараметрыТипа = Неопределено;
	Если КоличествоПолей > МинимальноеКоличествоПолей Тогда
		ДополнительныеПараметрыТипа = ОписаниеПолей.Поля[3];
	КонецЕсли;
	ТипРеквизита = ТипРеквизитаПоОписанию(ИмяТипа, ДополнительныеПараметрыТипа);
	ОписаниеМодификаций.Реквизиты[ИдентификаторРеквизита].ТипыРеквизита.Вставить(ИдентификаторТипа, ТипРеквизита);
КонецПроцедуры // ОбработатьСтрокуТипаРеквизита()

Функция ТипРеквизитаПоОписанию(ИмяТипа, ДополнительныеПараметрыТипа)
	РезультатФункции = Неопределено;
	
	Попытка
		// TODO: Добавить обработку типов "Дата", "ДвоичныеДанные"
		Если ВРег(ИмяТипа) = "СТРОКА" Тогда
			РезультатФункции = ТипСтрока(ДополнительныеПараметрыТипа);
		ИначеЕсли ВРег(ИмяТипа) = "ЧИСЛО" Тогда
			РезультатФункции = ТипЧисло(ДополнительныеПараметрыТипа);
		Иначе
			РезультатФункции = ПрочийТип(ИмяТипа);
		КонецЕсли;
	Исключение
		// TODO: Обработать ошибку преобразования
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатФункции;
КонецФункции // ТипРеквизитаПоОписанию()

Функция ТипЧисло(ДополнительныеПараметрыТипа)
	ОписаниеТипаЦелоеЧисло = ОписаниеТипаЦелоеЧисло();
	Длина = 0;
	Точность = 0;
	ПараметрыЧисла = СтрРазделить(ДополнительныеПараметрыТипа, ".");
	Если ПараметрыЧисла.Количество() > 0 Тогда
		Длина = ОписаниеТипаЦелоеЧисло.ПривестиЗначение(ПараметрыЧисла[0]);
	КонецЕсли;
	Если ПараметрыЧисла.Количество() > 1 Тогда
		Точность = ОписаниеТипаЦелоеЧисло.ПривестиЗначение(ПараметрыЧисла[1]);
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Длина, Точность));
КонецФункции // ТипЧисло()

Функция ТипСтрока(ДополнительныеПараметрыТипа)
	ОписаниеТипаЦелоеЧисло = ОписаниеТипаЦелоеЧисло();
	ДлинаСтроки = ОписаниеТипаЦелоеЧисло.ПривестиЗначение(ДополнительныеПараметрыТипа);
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
КонецФункции // ТипСтрока()

Функция ПрочийТип(ИмяТипа)
	Возврат Новый ОписаниеТипов(ИмяТипа);
КонецФункции // ПрочийТип()

Функция ОписаниеТипаЦелоеЧисло()
	ЧислоРазрядов = 10;
	ЧислоРазрядовДробнойЧасти = 0;
	КвалификаторЧисла = Новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти);
	РезультатФункции = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	Возврат РезультатФункции;
КонецФункции // ОписаниеТипаЦелоеЧисло()

#КонецОбласти

#Область СтрокаЭлемента

Процедура ОбработатьСтрокуЭлемента(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола)
	МинимальноеКоличествоПолей = 3;
	КоличествоПолей = ОписаниеПолей.Поля.Количество();
	ПроверитьКоличествоПолейСтроки(ОписаниеПолей, МинимальноеКоличествоПолей);
	
	ИмяЭлемента = ОписаниеПолей.Поля[1];
	ИдентификаторЭлемента = ВРег(ИмяЭлемента);
	ИмяТипаЭлемента = ОписаниеПолей.Поля[2];
	ИмяРодителя = "";
	ИмяПоследующегоЭлемента = "";
	Если КоличествоПолей > 3 Тогда
		ИмяРодителя = ОписаниеПолей.Поля[3];
	КонецЕсли;
	Если КоличествоПолей > 4 Тогда
		ИмяПоследующегоЭлемента = ОписаниеПолей.Поля[4];
	КонецЕсли;
	Попытка
		ТипЭлемента = ТипЭлемента(ИмяТипаЭлемента);
	Исключение
		ТекстИсключения = СтрШаблон(
		  НСтр("ru='Некорректный тип элемента формы ""%1"" в строке %2'"),
		  ИмяТипаЭлемента,
		  ОписаниеПолей.НомерСтроки
		);
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	ОписаниеЭлемента = Новый Структура;
	Если ОписаниеМодификаций.Элементы.Свойство(ИдентификаторЭлемента) Тогда
		ОписаниеЭлемента = ОписаниеМодификаций.Элементы[ИдентификаторЭлемента];
	КонецЕсли;
	ОписаниеЭлемента.Вставить("ИмяЭлемента", ИмяЭлемента);
	ОписаниеЭлемента.Вставить("ТипЭлемента", ТипЭлемента);
	ОписаниеЭлемента.Вставить("ИмяРодителя", ИмяРодителя);
	ОписаниеЭлемента.Вставить("ИмяПоследующегоЭлемента", ИмяПоследующегоЭлемента);
	ОписаниеЭлемента.Вставить("СвойстваЭлемента", Новый Структура);
	ОписаниеЭлемента.Вставить("ПредставленияСвойствЭлемента", Новый Структура);
	ОписаниеЭлемента.Вставить("ОбработчикиЭлемента", Новый Структура);
	
	ОписаниеМодификаций.Элементы.Вставить(ИдентификаторЭлемента, ОписаниеЭлемента);
КонецПроцедуры // ОбработатьСтрокуЭлемента()

Функция ТипЭлемента(ИмяТипаЭлемента)
	Если МодификацияФормИдентификаторы.ЭтоДекорацияФормы(ВРег(ИмяТипаЭлемента)) Тогда
		Возврат МодификацияФормПовтИсп.ТипДекорацияФормы();
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоГруппаФормы(ВРег(ИмяТипаЭлемента)) Тогда
		Возврат МодификацияФормПовтИсп.ТипГруппаФормы();
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоКнопкаФормы(ВРег(ИмяТипаЭлемента)) Тогда
		Возврат МодификацияФормПовтИсп.ТипКнопкаФормы();
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоТаблицаФормы(ВРег(ИмяТипаЭлемента)) Тогда
		Возврат МодификацияФормПовтИсп.ТипТаблицаФормы();
	ИначеЕсли МодификацияФормИдентификаторы.ЭтоПолеФормы(ВРег(ИмяТипаЭлемента)) Тогда
		Возврат МодификацияФормПовтИсп.ТипПолеФормы();
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
КонецФункции // ТипЭлемента()

#КонецОбласти

#Область СтрокаСвойстваЭлемента

Процедура ОбработатьСтрокуСвойстваЭлемента(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола)
	МинимальноеКоличествоПолей = 4;
	КоличествоПолей = ОписаниеПолей.Поля.Количество();
	ПроверитьКоличествоПолейСтроки(ОписаниеПолей, МинимальноеКоличествоПолей);

	ИмяЭлемента = ОписаниеПолей.Поля[1];
	ИдентификаторЭлемента = ВРег(ИмяЭлемента);
	ИмяСвойства = ОписаниеПолей.Поля[2];
	ИдентификаторСвойства = Врег(ИмяСвойства);
	ЗначениеСвойства = ОписаниеПолей.Поля[3];
	
	Если Не ОписаниеМодификаций.Элементы.Свойство(ИдентификаторЭлемента) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Отсутствует описание элемента ""%1""'"), ИмяЭлемента);
	КонецЕсли;
	
	ОписаниеЭлемента = ОписаниеМодификаций.Элементы[ИдентификаторЭлемента];
	ОписаниеЭлемента.ПредставленияСвойствЭлемента.Вставить(ИдентификаторСвойства, ЗначениеСвойства);
	//МодификацияФормОбработкаСвойствЭлемента.ОбработатьСвойствоЭлемента(
	//  ОписаниеЭлемента, 
	//  ИмяСвойства, 
	//  ЗначениеСвойства
	//);
КонецПроцедуры // ОбработатьСтрокуСвойстваЭлемента()

#КонецОбласти

#Область СтрокаОбработчикаЭлемента

Процедура ОбработатьСтрокуОбработчикаЭлемента(ОписаниеМодификаций, ОписаниеПолей, ГенераторПротокола)
	МинимальноеКоличествоПолей = 4;
	КоличествоПолей = ОписаниеПолей.Поля.Количество();
	ПроверитьКоличествоПолейСтроки(ОписаниеПолей, МинимальноеКоличествоПолей);
	
	ИмяЭлемента = ОписаниеПолей.Поля[1];
	ИдентификаторЭлемента = ВРег(ИмяЭлемента);
	ИмяОбработчика = ОписаниеПолей.Поля[2];
	ИмяПроцедурыОбработчика = ОписаниеПолей.Поля[3];
	
	Если Не ОписаниеМодификаций.Элементы.Свойство(ИдентификаторЭлемента) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Отсутствует описание элемента ""%1""'"), ИмяЭлемента);
	КонецЕсли;
	
	ОписаниеЭлемента = ОписаниеМодификаций.Элементы[ИдентификаторЭлемента];
	ОписаниеОбработчика = Новый Структура(
	  "ИмяОбработчика, ИмяПроцедурыОбработчика",
	  ИмяОбработчика,
	  ИмяПроцедурыОбработчика
	);
	ОписаниеЭлемента.ОбработчикиЭлемента.Вставить(
	  ВРег(ИмяОбработчика),
	  ОписаниеОбработчика
	);
КонецПроцедуры // ОбработатьСтрокуОбработчикаЭлемента()

#КонецОбласти

#Область ОбработкаПолейОбщиеПроцедурыФункции

Процедура ПроверитьКоличествоПолейСтроки(ОписаниеПолей, МинимальноеКоличествоПолей)
	КоличествоПолей = ОписаниеПолей.Поля.Количество();
	Если КоличествоПолей >= МинимальноеКоличествоПолей Тогда
		Возврат;
	КонецЕсли;
		
	ТекстИсключения = СтрШаблон(
	  НСтр("ru='Неправильный формат описания в строке %1: ожидается полей %2, указано полей %3'"),
	  ОписаниеПолей.НомерСтроки, 
	  МинимальноеКоличествоПолей, 
	  КоличествоПолей
	);
	ВызватьИсключение ТекстИсключения;
КонецПроцедуры // ПроверитьКоличествоПолейСтроки()

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПроверкаОписанияМодификаций

Процедура ПроверитьОписаниеМодификаций(ОписаниеМодификаций, ГенераторПротокола)
	ПроверитьОписаниеРеквизитов(ОписаниеМодификаций.Реквизиты, ГенераторПротокола);
КонецПроцедуры // ПроверитьОписаниеМодификаций()

Процедура ПроверитьОписаниеРеквизитов(ОписаниеМодификацийРеквизитов, ГенераторПротокола)
	ОписанияРеквизитовКУдалению = Новый Массив;
	Для Каждого Элемент Из ОписаниеМодификацийРеквизитов Цикл
		ИдентификаторРеквизита = Элемент.Ключ;
		ОписаниеРеквизита = Элемент.Значение;
		Если ОписаниеРеквизита.ТипыРеквизита.Количество() = 0 Тогда
			ОписанияРеквизитовКУдалению.Добавить(ИдентификаторРеквизита);
			// TODO: Добавить в протокол
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из ОписанияРеквизитовКУдалению Цикл
		ОписаниеМодификацийРеквизитов.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры // ПроверитьОписаниеРеквизитов()

#КонецОбласти

#Область МодификацияРеквизитов

Процедура МодифицироватьРеквизиты(Форма, ОписаниеМодификаций, ГенераторПротокола)
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Элемент Из ОписаниеМодификаций.Реквизиты Цикл
		ОписаниеРеквизита = Элемент.Значение;
		ИмяРеквизита = ОписаниеРеквизита.ИмяРеквизита;
		ТипыРеквизита = ОписаниеТипаРеквизитаПоСоответствию(ОписаниеРеквизита.ТипыРеквизита);
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипыРеквизита);
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры // МодифицироватьРеквизиты()

Функция ОписаниеТипаРеквизитаПоСоответствию(ТипыРеквизита)
	КвалификаторыЧисла = Неопределено;
	КвалификаторыСтроки = Неопределено;
	КвалификаторыДаты = Неопределено;
	КвалификаторыДвоичныхДанных = Неопределено;
	
	Типы = Новый Массив;
	Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
		Для Каждого Элемент Из ТипРеквизита.Значение.Типы() Цикл
			Типы.Добавить(Элемент);
		КонецЦикла;
		КвалификаторыЧисла = УстановитьКвалификаторСПроверкой(
		  КвалификаторыЧисла, 
		  ТипРеквизита.Значение.КвалификаторыЧисла
		);
		КвалификаторыСтроки = УстановитьКвалификаторСПроверкой(
		  КвалификаторыСтроки, 
		  ТипРеквизита.Значение.КвалификаторыСтроки
		);
		КвалификаторыДаты = УстановитьКвалификаторСПроверкой(
		  КвалификаторыДаты, 
		  ТипРеквизита.Значение.КвалификаторыДаты
		);
		КвалификаторыДвоичныхДанных = УстановитьКвалификаторСПроверкой(
		  КвалификаторыДвоичныхДанных, 
		  ТипРеквизита.Значение.КвалификаторыДвоичныхДанных
		);
	КонецЦикла;
	
	РезультатФункции = Новый ОписаниеТипов(
	  Типы,
	  КвалификаторыЧисла,
	  КвалификаторыСтроки,
	  КвалификаторыДаты,
	  КвалификаторыДвоичныхДанных
	);
	
	Возврат РезультатФункции;
КонецФункции // ОписаниеТипаРеквизитаПоСоответствию()

Функция УстановитьКвалификаторСПроверкой(СтароеЗначение, НовоеЗначение)
	РезультатФункции = СтароеЗначение;
	
	Если СтароеЗначение = Неопределено Тогда
		РезультатФункции = НовоеЗначение;
	КонецЕсли;
	
	Возврат РезультатФункции;
КонецФункции // УстановитьКвалификаторСПроверкой()

#КонецОбласти

#Область МодификацияЭлементов

Процедура МодифицироватьЭлементы(Форма, ОписаниеМодификаций, ГенераторПротокола)
	КоллекцияЭлементов = КоллекцияЭлементовВПорядкеВывода(ОписаниеМодификаций);
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		ОписаниеЭлемента = ЭлементКоллекции;
		
		// Создание элемента
		Родитель = РодительЭлемента(Форма, ОписаниеЭлемента);
		ПоследующийЭлемент = Форма.Элементы.Найти(ОписаниеЭлемента.ИмяПоследующегоЭлемента);
		НовыйЭлемент = Форма.Элементы.Вставить(
		  ОписаниеЭлемента.ИмяЭлемента,
		  ОписаниеЭлемента.ТипЭлемента,
		  Родитель,
		  ПоследующийЭлемент
		);
		
		// Установка свойств элемента
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ОписаниеЭлемента.СвойстваЭлемента);
		
		// Установка обработчиков элемента
		Для Каждого Элемент Из ОписаниеЭлемента.ОбработчикиЭлемента Цикл
			ОписаниеОбработчика = Элемент.Значение;
			
			НовыйЭлемент.УстановитьДействие(
			  ОписаниеОбработчика.ИмяОбработчика, 
			  ОписаниеОбработчика.ИмяПроцедурыОбработчика
			);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // МодифицироватьЭлементы()

Функция КоллекцияЭлементовВПорядкеВывода(ОписаниеМодификаций)
	РезультатФункции = Новый Массив;
	
	Для Каждого ОписаниеЭлемента Из ОписаниеМодификаций.Элементы Цикл
		РезультатФункции.Добавить(ОписаниеЭлемента.Значение);
	КонецЦикла;
	
	Возврат РезультатФункции;
КонецФункции // КоллекцияЭлементовВПорядкеВывода()
	
Функция РодительЭлемента(Форма, ОписаниеЭлемента)
	Если МодификацияФормИдентификаторы.ЭтоИдентификаторФормы(ВРег(ОписаниеЭлемента.ИмяРодителя)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.Элементы.Найти(ОписаниеЭлемента.ИмяРодителя);
КонецФункции // РодительЭлемента()

#КонецОбласти

#КонецОбласти
