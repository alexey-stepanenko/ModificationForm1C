#Область ПрограммныйИнтерфейс
// Раздел содержит экспортные процедуры и функции, предназначенные для использования другими объектами 
// конфигурации или другими программами (например, через внешнее соединение).

//TODO: Добавить описание процедуры
Процедура МодифицироватьФорму(Форма, МакетОписаниеМодификаций, ГенераторПротокола = Неопределено) Экспорт
	Если ГенераторПротокола = Неопределено Тогда
		ГенераторПротокола = Обработки.ГенераторПротоколаМодификацииФормПоУмолчанию.СоздатьГенераторПротокола();
	КонецЕсли;
	
	ОписаниеМодификаций = ОписаниеМодификаций(МакетОписаниеМодификаций, ГенераторПротокола);
	ПроверитьОписаниеМодификаций(ОписаниеМодификаций, ГенераторПротокола);
	МодифицироватьРеквизиты(Форма, ОписаниеМодификаций, ГенераторПротокола);
КонецПроцедуры // МодифицироватьФорму()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Раздел предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем 
// должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других 
// функциональных подсистем этой же библиотеки.

Функция ОписаниеМодификаций(МакетОписаниеМодификаций, ГенераторПротокола) Экспорт 
	РазделительПолей = Символы.Таб;
	РезультатФункции = СоздатьСтруктуруОписанияМодификаций();
	
	Для Сч = 1 По МакетОписаниеМодификаций.КоличествоСтрок() Цикл
		СтрокаДокумента = МакетОписаниеМодификаций.ПолучитьСтроку(Сч);
		ПоляИзСтроки = ПоляИзСтроки(СтрокаДокумента, РазделительПолей);
		Попытка
			ОбработатьПоля(РезультатФункции, ПоляИзСтроки, ГенераторПротокола);
		Исключение
			ОписаниеОшибки = СоздатьСтруктуруОписанияОшибки();
			ЗаполнитьОписаниеОшибкиИзИнформацииОбОшибке(ОписаниеОшибки, ИнформацияОбОшибке());
			ОписаниеОшибки.НомерСтрокиМакета = Сч;
			ОписаниеОшибки.СтрокаМакета = СтрокаДокумента;
			ГенераторПротокола.ОбработатьОшибку(ОписаниеОшибки);
			Если ГенераторПротокола.ПрерватьМодификациюПриОшибке() Тогда
				ВызватьИсключение;
			КонецЕсли;	
		КонецПопытки;
	КонецЦикла;
	
	Возврат РезультатФункции;
КонецФункции // ОписаниеМодификаций()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Раздел содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, 
// когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько 
// объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, 
// предназначенные только для вызова из других объектов данной подсистемы.

#Область ОписаниеМодификаций
	
#Область ИдентификаторыСтрок

Функция СтрокаРеквизита()
	Возврат "РЕКВИЗИТ";
КонецФункции // СтрокаРеквизита()

Функция СтрокаТипаРеквизита()
	Возврат "ТИПРЕКВИЗИТА";
КонецФункции // СтрокаТипаРеквизита()
	
#КонецОбласти

Функция СоздатьСтруктуруОписанияМодификаций()
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("Реквизиты", Новый Структура);
	
	Возврат РезультатФункции;
КонецФункции // СоздатьСтруктуруОписанияМодификаций()

Функция ПоляИзСтроки(СтрокаСПолями, РазделительПолей)
	РезультатФункции = Новый Массив;
	Поля = СтрРазделить(СтрокаСПолями, РазделительПолей, Ложь);
	Для Каждого Элемент Из Поля Цикл
		РезультатФункции.Добавить(СокрЛП(Элемент));
	КонецЦикла;
	
	Возврат РезультатФункции;
КонецФункции // ПоляИзСтроки()

Функция СоздатьСтруктуруОписанияОшибки()
	РезультатФункции = Новый Структура;
	
	РезультатФункции.Вставить("ДополнительнаяИнформация", Неопределено);
	РезультатФункции.Вставить("ИмяМодуля", Неопределено);
	РезультатФункции.Вставить("ИсходнаяСтрока", Неопределено);
	РезультатФункции.Вставить("Код", Неопределено);
	РезультатФункции.Вставить("НомерСтроки", Неопределено);
	РезультатФункции.Вставить("Описание", Неопределено);
	РезультатФункции.Вставить("НомерСтрокиМакета", Неопределено);
	РезультатФункции.Вставить("СтрокаМакета", Неопределено);
	
	Возврат РезультатФункции;
КонецФункции // СоздатьСтруктуруИнформацииОбОшибке()

Процедура ЗаполнитьОписаниеОшибкиИзИнформацииОбОшибке(ОписаниеОшибки, ИнформацияОбОшибке)
	ЗаполнитьЗначенияСвойств(ОписаниеОшибки, ИнформацияОбОшибке);
	//ОписаниеОшибки.Вставить("ДополнительнаяИнформация", ИнформацияОбОшибке.ДополнительнаяИнформация);
	//ОписаниеОшибки.Вставить("ИмяМодуля", ИнформацияОбОшибке.ИмяМодуля);
	//ОписаниеОшибки.Вставить("ИсходнаяСтрока", ИнформацияОбОшибке.ИсходнаяСтрока);
	//ОписаниеОшибки.Вставить("Код", ИнформацияОбОшибке.Код);
	//ОписаниеОшибки.Вставить("НомерСтроки", ИнформацияОбОшибке.НомерСтроки);
	//ОписаниеОшибки.Вставить("Описание", ИнформацияОбОшибке.Описание);
КонецПроцедуры // ЗаполнитьОписаниеОшибкиИзИнформацииОбОшибке()

Процедура ОбработатьПоля(ОписаниеМодификаций, Поля, ГенераторПротокола)
	Если Поля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ВРег(Поля[0]);
	Если Идентификатор = СтрокаРеквизита() Тогда
		ОбработатьСтрокуРеквизита(ОписаниеМодификаций, Поля, ГенераторПротокола);
	ИначеЕсли Идентификатор = СтрокаТипаРеквизита() Тогда
		ОбработатьСтрокуТипаРеквизита(ОписаниеМодификаций, Поля, ГенераторПротокола);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры // ОбработатьПоля()

#Область ОбработкаПолей
	
#Область СтрокаРеквизита
	
Процедура ОбработатьСтрокуРеквизита(ОписаниеМодификаций, Поля, ГенераторПротокола)
	ИмяРеквизита = Поля[1];
	ИдентификаторРеквизита = ВРег(ИмяРеквизита);
	Если ОписаниеМодификаций.Реквизиты.Свойство(ИдентификаторРеквизита) Тогда
		ОписаниеРеквизита = ОписаниеМодификаций.Реквизиты[ИдентификаторРеквизита];
	Иначе
		ОписаниеРеквизита = Новый Структура;
	КонецЕсли;
	ОписаниеРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	ОписаниеРеквизита.Вставить("ТипыРеквизита", Новый Соответствие);
	
	ОписаниеМодификаций.Реквизиты.Вставить(ИдентификаторРеквизита, ОписаниеРеквизита);
КонецПроцедуры // ОбработатьСтрокуРеквизита()

#КонецОбласти

#Область СтрокаТипаРеквизита
	
Процедура ОбработатьСтрокуТипаРеквизита(ОписаниеМодификаций, Поля, ГенераторПротокола)
	КоличествоПолей = Поля.Количество();
	Если КоличествоПолей < 3 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Неправильный формат описания типа реквизита: ожидается полей 3, указано полей %1'"), КоличествоПолей);
	КонецЕсли;
	
	ИмяРеквизита = Поля[1];
	ИмяТипа = Поля[2];
	ИдентификаторРеквизита = ВРег(ИмяРеквизита);
	ИдентификаторТипа = ВРег(ИмяТипа);
	Если Не ОписаниеМодификаций.Реквизиты.Свойство(ИдентификаторРеквизита) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Отсутствует описание реквизита ""%1""'"), ИмяРеквизита);
	КонецЕсли;
	
	ДополнительныеПараметрыТипа = Неопределено;
	Если КоличествоПолей > 3 Тогда
		ДополнительныеПараметрыТипа = Поля[3];
	КонецЕсли;
	// TODO: Запоминать тип, а не тектовое описание
	ТипРеквизита = ТипРеквизитаПоОписанию(ИмяТипа, ДополнительныеПараметрыТипа);
	ОписаниеМодификаций.Реквизиты[ИдентификаторРеквизита].ТипыРеквизита.Вставить(ИдентификаторТипа, ТипРеквизита);
КонецПроцедуры // ОбработатьСтрокуТипаРеквизита()

Функция ТипРеквизитаПоОписанию(ИмяТипа, ДополнительныеПараметрыТипа)
	РезультатФункции = Неопределено;
	
	Попытка
		//TODO: Добавить обработку типов "Дата", "ДвоичныеДанные"
		Если ВРег(ИмяТипа) = "СТРОКА" Тогда
			РезультатФункции = ТипСтрока(ДополнительныеПараметрыТипа);
		ИначеЕсли ВРег(ИмяТипа) = "ЧИСЛО" Тогда
			РезультатФункции = ТипЧисло(ДополнительныеПараметрыТипа);
		Иначе
			РезультатФункции = ПрочийТип(ИмяТипа);
		КонецЕсли;
	Исключение
		// TODO: Обработать ошибку преобразования
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатФункции;
КонецФункции // ТипРеквизитаПоОписанию()

Функция ТипЧисло(ДополнительныеПараметрыТипа)
	ОписаниеТипаЦелоеЧисло = ОписаниеТипаЦелоеЧисло();
	Длина = 0;
	Точность = 0;
	ПараметрыЧисла = СтрРазделить(ДополнительныеПараметрыТипа, ".");
	Если ПараметрыЧисла.Количество() > 0 Тогда
		Длина = ОписаниеТипаЦелоеЧисло.ПривестиЗначение(ПараметрыЧисла[0]);
	КонецЕсли;
	Если ПараметрыЧисла.Количество() > 1 Тогда
		Точность = ОписаниеТипаЦелоеЧисло.ПривестиЗначение(ПараметрыЧисла[1]);
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Длина, Точность));
КонецФункции // ТипЧисло()

Функция ТипСтрока(ДополнительныеПараметрыТипа)
	ОписаниеТипаЦелоеЧисло = ОписаниеТипаЦелоеЧисло();
	ДлинаСтроки = ОписаниеТипаЦелоеЧисло.ПривестиЗначение(ДополнительныеПараметрыТипа);
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
КонецФункции // ТипСтрока()

Функция ПрочийТип(ИмяТипа)
	Возврат Новый ОписаниеТипов(ИмяТипа);
КонецФункции // ПрочийТип()

Функция ОписаниеТипаЦелоеЧисло()
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
КонецФункции // ОписаниеТипаЦелоеЧисло()

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПроверкаОписанияМодификаций

Процедура ПроверитьОписаниеМодификаций(ОписаниеМодификаций, ГенераторПротокола)
	ПроверитьОписаниеРеквизитов(ОписаниеМодификаций.Реквизиты, ГенераторПротокола);
КонецПроцедуры // ПроверитьОписаниеМодификаций()

Процедура ПроверитьОписаниеРеквизитов(ОписаниеМодификацийРеквизитов, ГенераторПротокола)
	ОписанияРеквизитовКУдалению = Новый Массив;
	Для Каждого Элемент Из ОписаниеМодификацийРеквизитов Цикл
		ИдентификаторРеквизита = Элемент.Ключ;
		ОписаниеРеквизита = Элемент.Значение;
		Если ОписаниеРеквизита.ТипыРеквизита.Количество() = 0 Тогда
			ОписанияРеквизитовКУдалению.Добавить(ИдентификаторРеквизита);
			// TODO: Добавить в протокол
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из ОписанияРеквизитовКУдалению Цикл
		ОписаниеМодификацийРеквизитов.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры // ПроверитьОписаниеРеквизитов()

#КонецОбласти

#Область МодификацияРеквизитов

Процедура МодифицироватьРеквизиты(Форма, ОписаниеМодификаций, ГенераторПротокола)
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Элемент Из ОписаниеМодификаций.Реквизиты Цикл
		ОписаниеРеквизита = Элемент.Значение;
		ИмяРеквизита = ОписаниеРеквизита.ИмяРеквизита;
		ТипыРеквизита = ОписаниеТипаРеквизитаПоСоответствию(ОписаниеРеквизита.ТипыРеквизита);
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипыРеквизита);
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры // МодифицироватьРеквизиты()

Функция ОписаниеТипаРеквизитаПоСоответствию(ТипыРеквизита)
	КвалификаторыЧисла = Неопределено;
	КвалификаторыСтроки = Неопределено;
	КвалификаторыДаты = Неопределено;
	КвалификаторыДвоичныхДанных = Неопределено;
	
	Типы = Новый Массив;
	Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
		Для Каждого Элемент Из ТипРеквизита.Значение.Типы() Цикл
			Типы.Добавить(Элемент);
		КонецЦикла;
		КвалификаторыЧисла = УстановитьКвалификаторСПроверкой(КвалификаторыЧисла, ТипРеквизита.Значение.КвалификаторыЧисла);
		КвалификаторыСтроки = УстановитьКвалификаторСПроверкой(КвалификаторыСтроки, ТипРеквизита.Значение.КвалификаторыСтроки);
		КвалификаторыДаты = УстановитьКвалификаторСПроверкой(КвалификаторыДаты, ТипРеквизита.Значение.КвалификаторыДаты);
		КвалификаторыДвоичныхДанных = УстановитьКвалификаторСПроверкой(КвалификаторыДвоичныхДанных, ТипРеквизита.Значение.КвалификаторыДвоичныхДанных);
	КонецЦикла;
	
	РезультатФункции = Новый ОписаниеТипов(
	  Типы,
	  КвалификаторыЧисла,
	  КвалификаторыСтроки,
	  КвалификаторыДаты,
	  КвалификаторыДвоичныхДанных
	);
	
	Возврат РезультатФункции;
КонецФункции // ОписаниеТипаРеквизитаПоСоответствию()

Функция УстановитьКвалификаторСПроверкой(СтароеЗначение, НовоеЗначение)
	РезультатФункции = СтароеЗначение;
	
	Если СтароеЗначение = Неопределено Тогда
		РезультатФункции = НовоеЗначение;
	КонецЕсли;
	
	Возврат РезультатФункции
КонецФункции // УстановитьКвалификаторСПроверкой()


#КонецОбласти

#КонецОбласти

